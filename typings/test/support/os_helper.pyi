"""
This type stub file was generated by pyright.
"""

import collections.abc
import contextlib
import os
import sys

if os.name == 'java':
    TESTFN_ASCII = ...
else:
    TESTFN_ASCII = ...
TESTFN_ASCII = ...
TESTFN_UNICODE = ...
if sys.platform == 'darwin':
    TESTFN_UNICODE = ...
TESTFN_UNENCODABLE = ...
if os.name == 'nt':
    ...
else:
    ...
FS_NONASCII = ...
SAVEDCWD = ...
TESTFN_UNDECODABLE = ...
if FS_NONASCII:
    TESTFN_NONASCII = ...
else:
    TESTFN_NONASCII = ...
TESTFN = ...
def make_bad_fd(): # -> int:
    """
    Create an invalid file descriptor by opening and closing a file and return
    its fd.
    """
    ...

_can_symlink = ...
def can_symlink(): # -> bool:
    ...

def skip_unless_symlink(test):
    """Skip decorator for tests that require functional symlink"""
    ...

_can_xattr = ...
def can_xattr(): # -> bool:
    ...

def skip_unless_xattr(test):
    """Skip decorator for tests that require functional extended attributes"""
    ...

_can_chmod = ...
def can_chmod(): # -> bool:
    ...

def skip_unless_working_chmod(test):
    """Skip tests that require working os.chmod()

    WASI SDK 15.0 cannot change file mode bits.
    """
    ...

_can_dac_override = ...
def can_dac_override(): # -> bool:
    ...

def skip_if_dac_override(test):
    ...

def skip_unless_dac_override(test):
    ...

def unlink(filename): # -> None:
    ...

if sys.platform.startswith("win"):
    ...
else:
    _unlink = ...
    _rmdir = ...
def rmdir(dirname): # -> None:
    ...

def rmtree(path): # -> None:
    ...

@contextlib.contextmanager
def temp_dir(path=..., quiet=...): # -> Generator[str | Any, Any, None]:
    """Return a context manager that creates a temporary directory.

    Arguments:

      path: the directory to create temporarily.  If omitted or None,
        defaults to creating a temporary directory using tempfile.mkdtemp.

      quiet: if False (the default), the context manager raises an exception
        on error.  Otherwise, if the path is specified and cannot be
        created, only a warning is issued.

    """
    ...

@contextlib.contextmanager
def change_cwd(path, quiet=...): # -> Generator[str, Any, None]:
    """Return a context manager that changes the current working directory.

    Arguments:

      path: the directory to use as the temporary current working directory.

      quiet: if False (the default), the context manager raises an exception
        on error.  Otherwise, it issues only a warning and keeps the current
        working directory the same.

    """
    ...

@contextlib.contextmanager
def temp_cwd(name=..., quiet=...): # -> Generator[str, Any, None]:
    """
    Context manager that temporarily creates and changes the CWD.

    The function temporarily changes the current working directory
    after creating a temporary directory in the current directory with
    name *name*.  If *name* is None, the temporary directory is
    created using tempfile.mkdtemp.

    If *quiet* is False (default) and it is not possible to
    create or change the CWD, an error is raised.  If *quiet* is True,
    only a warning is raised and the original CWD is used.

    """
    ...

def create_empty_file(filename): # -> None:
    """Create an empty file. If the file already exists, truncate it."""
    ...

@contextlib.contextmanager
def open_dir_fd(path): # -> Generator[int, Any, None]:
    """Open a file descriptor to a directory."""
    ...

def fs_is_case_insensitive(directory): # -> bool:
    """Detects if the file system for the specified directory
    is case-insensitive."""
    ...

class FakePath:
    """Simple implementing of the path protocol.
    """
    def __init__(self, path) -> None:
        ...

    def __repr__(self): # -> str:
        ...

    def __fspath__(self): # -> Any | type:
        ...



def fd_count(): # -> int:
    """Count the number of open file descriptors.
    """
    ...

if hasattr(os, "umask"):
    @contextlib.contextmanager
    def temp_umask(umask): # -> Generator[None, Any, None]:
        """Context manager that temporarily sets the process umask."""
        ...

else:
    @contextlib.contextmanager
    def temp_umask(umask): # -> Generator[None, Any, None]:
        """no-op on platforms without umask()"""
        ...

class EnvironmentVarGuard(collections.abc.MutableMapping):
    """Class to help protect the environment variable properly.  Can be used as
    a context manager."""
    def __init__(self) -> None:
        ...

    def __getitem__(self, envvar): # -> str:
        ...

    def __setitem__(self, envvar, value): # -> None:
        ...

    def __delitem__(self, envvar): # -> None:
        ...

    def keys(self): # -> KeysView[str]:
        ...

    def __iter__(self): # -> Iterator[str]:
        ...

    def __len__(self): # -> int:
        ...

    def set(self, envvar, value): # -> None:
        ...

    def unset(self, envvar): # -> None:
        ...

    def copy(self): # -> dict[str, str]:
        ...

    def __enter__(self): # -> Self:
        ...

    def __exit__(self, *ignore_exc): # -> None:
        ...
